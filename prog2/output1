Quicksort and Binary Merge with Multiple Processes:

*** MAIN: shared memory key = 1782675843
*** MAIN: shared memory created
*** MAIN: shared memory attached and is ready to use
Input array for qsort has 8 elements:
    4  7  2  9  3  5  8  6 

Input array x[] for merge has 6 elements:
    1  3  7  15  17  24 

Input array y[] for merge has 5 elements:
    2  8  16  18  20 

*** MAIN: about to spawn the process for qsort
*** MAIN: about to spawn the process for merge
Data - O: 4
buff x: 
X? 1
   ### Q-PROC(162696): entering with a[0..7]
       4  7  2  9  3  5  8  6 

      $$$$ M-PROC(162697): Main merge process
      $$$ M-PROC(162699): handling x[0] = 1
      $$$ M-PROC(162699): x[0] = 1 is found to be smaller than y[0] = 2
      $$$ M-PROC(162699): about to write x[0] = 1 into position 0 of the output array
      $$$ M-PROC(162701): handling x[1] = 3
      $$$ M-PROC(162702): handling x[2] = 7
      $$$ M-PROC(162701): x[1] = 3 is found between y[-1] = 24 and y[0] = 2
      $$$ M-PROC(162702): x[2] = 7 is found between y[-1] = 24 and y[0] = 2
      $$$ M-PROC(162701): about to write x[1] = 3 into position 2 of the output array
      $$$ M-PROC(162702): about to write x[2] = 7 into position 3 of the output array
      $$$ M-PROC(162704): handling x[4] = 17
      $$$ M-PROC(162704): x[4] = 17 is found between y[1] = 8 and y[2] = 16
      $$$ M-PROC(162710): handling y[4] = 20
      $$$ M-PROC(162710): y[4] = 20 is found between x[3] = 15 and x[4] = 17
      $$$ M-PROC(162710): about to write y[4] = 20 into position 9 of the output array
      $$$ M-PROC(162705): handling x[5] = 24
      $$$ M-PROC(162704): about to write x[4] = 17 into position 7 of the output array
      $$$ M-PROC(162705): x[5] = 24 is found to be larger than y[4] = 20
      $$$ M-PROC(162703): handling x[3] = 15
      $$$ M-PROC(162705): about to write x[5] = 24 into position 10 of the output array
      $$$ M-PROC(162703): x[3] = 15 is found between y[0] = 2 and y[1] = 8
      $$$ M-PROC(162703): about to write x[3] = 15 into position 5 of the output array
      $$$ M-PROC(162706): handling y[0] = 2
      $$$ M-PROC(162706): y[0] = 2 is found between x[-1] = 6 and x[0] = 1
      $$$ M-PROC(162706): about to write y[0] = 2 into position 1 of the output array
      $$$ M-PROC(162707): handling y[1] = 8
      $$$ M-PROC(162707): y[1] = 8 is found between x[1] = 3 and x[2] = 7
      $$$ M-PROC(162707): about to write y[1] = 8 into position 4 of the output array
      $$$ M-PROC(162708): handling y[2] = 16
      $$$ M-PROC(162709): handling y[3] = 18
      $$$ M-PROC(162708): y[2] = 16 is found between x[2] = 7 and x[3] = 15
      $$$ M-PROC(162709): y[3] = 18 is found between x[3] = 15 and x[4] = 17
      $$$ M-PROC(162708): about to write y[2] = 16 into position 6 of the output array
      $$$ M-PROC(162709): about to write y[3] = 18 into position 8 of the output array
   ### Q-PROC(162696): entering with a[3..7]
       9  7  5  8  6 

   ### Q-PROC(162698): entering with a[0..1]
       3  2 

   ### Q-PROC(162700): entering with a[3..7]
       6  7  5  8  9 

wait 1: 162697
   ### Q-PROC(162696): entering with a[8..7]
      

   ### Q-PROC(162711): entering with a[3..6]
       5  6  7  8 

   ### Q-PROC(162712): entering with a[8..7]
      

   ### Q-PROC(162698): entering with a[2..1]
      

   ### Q-PROC(162714): entering with a[2..1]
      

   ### Q-PROC(162715): entering with a[3..3]
       5 

wait 2: 162696
err1: Success
   ### Q-PROC(162700): entering with a[5..7]
       7  8  9 

err2: Success
   ### Q-PROC(162716): entering with a[5..7]
       7  8  9 

   ### Q-PROC(162713): entering with a[0..0]
       2 

*** MAIN: sorted array by qsort:
*** MAIN: merged array:
data e: 4
data n: 0
Data : 140171652317184
qargs[0] = ./qsort
qargs[1] = 0
qargs[2] = 7
qargs[3] = 130252803
qargs[4] = 30
datum: 140171652317184
data c: 4
data a: 4
data b: 0
 2  3  4  5  6  7  8  9 
    val data: 19
data[0] = 2
 1  2  3  7  8  15  16  17  18  20  24 
   ### Q-PROC(162711): entering with a[4..6]
       6  7  8 

   ### Q-PROC(162717): entering with a[3..2]
      

   ### Q-PROC(162718): entering with a[4..6]
       6  7  8 

   ### Q-PROC(162720): entering with a[5..4]
      

   ### Q-PROC(162719): entering with a[5..4]
      

   ### Q-PROC(162700): entering with a[6..7]
       8  9 

   ### Q-PROC(162723): entering with a[4..3]
      

   ### Q-PROC(162724): entering with a[4..3]
      

   ### Q-PROC(162716): entering with a[6..7]
       8  9 

   ### Q-PROC(162722): entering with a[6..7]
       8  9 

   ### Q-PROC(162721): entering with a[6..7]
       8  9 

   ### Q-PROC(162718): entering with a[5..6]
       7  8 

   ### Q-PROC(162711): entering with a[5..6]
       7  8 

   ### Q-PROC(162726): entering with a[5..6]
       7  8 

   ### Q-PROC(162727): entering with a[6..5]
      

   ### Q-PROC(162716): entering with a[7..7]
       9 

   ### Q-PROC(162725): entering with a[5..6]
       7  8 

   ### Q-PROC(162729): entering with a[6..5]
      

   ### Q-PROC(162730): entering with a[7..7]
       9 

   ### Q-PROC(162728): entering with a[7..7]
       9 

   ### Q-PROC(162721): entering with a[7..7]
       9 

   ### Q-PROC(162732): entering with a[6..5]
      

   ### Q-PROC(162722): entering with a[7..7]
       9 

   ### Q-PROC(162731): entering with a[6..5]
      

   ### Q-PROC(162736): entering with a[5..4]
      

   ### Q-PROC(162718): entering with a[6..6]
       8 

   ### Q-PROC(162700): entering with a[7..7]
       9 

   ### Q-PROC(162735): entering with a[5..4]
      

   ### Q-PROC(162733): entering with a[7..7]
       9 

